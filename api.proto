syntax = "proto3";

package tanuki;


// COMMON

message EncryptedEnvelope {
  bytes key = 1; // one-time use to decrypt payload and public_key; if empty, use pre-established session key or bail out
  //
  bytes public_key_nonce = 10; // for sender's public key; leave empty unless required; one-time use; not secret
  bytes public_key = 11; // sender's public key; leave empty unless required; encrypted with key (decrypted field #1)
  //
  bytes payload_nonce = 20; // for payload; one-time use; not secret
  bytes payload = 21; // marshaled protobuf payload; encrypted with key (decrypted field #1)
  bytes payload_signature = 22; // of payload; verify against sender's public key
}

message StatusResponse {
  uint32 timestamp = 1;
  bool success = 2;
  uint32 error_type = 3;
  string error_description = 4;
}

message DomainTicket {
  bytes sender_pubkey_hash = 1;
  uint32 valid_after = 10;
  uint32 valid_before = 11;
  string sender_domain = 20;
  string recipient_domain = 21;
}


// ROUTER
// all router code needs redone...

service Router {
  rpc Receive(SubscriptionRequest) returns (stream Envelope) {}
  rpc Send(Envelope) returns (StatusResponse) {}
}

message SubscriptionRequest {
  string id = 1;
}

message Envelope {
  string recipient = 1;
  bytes pgp_message = 10;
}

message Message {
  string recipient = 1;
  string sender = 2;
  bytes message = 10;
  uint32 type = 11;
}


// IDENTITY REGISTRATION

service IdentityRegistration {
  rpc Register(stream EncryptedEnvelope) returns (stream EncryptedEnvelope) {}
}

message IdentityRegistrationRequest {
  string sender_domain = 1;
  bytes nonce = 2;
  bytes public_key = 3;
  bytes some_sort_of_authentication_proof = 10;
}

message IdentityRegistrationChallenge {
  IdentityRegistrationChallengeTicketEncrypted encrypted_registration_ticket = 1;
  bytes identity_registrar_signature_of_encrypted_registration_ticket = 2;
}

// IdentityRegistrationChallengeTicket message encrypted by the identity registrar instance's super-secret IdentityRegistrationTicket private key used only for this purpose
// ... to be created _and_ consumed by the identity registrar instance itself
message IdentityRegistrationChallengeTicketEncrypted {
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message IdentityRegistrationChallengeTicket {
  uint32 timestamp = 1;
  bytes nonce = 2;
  IdentityRegistrationRequest request = 3;
}

message IdentityRegistrationProof {
  IdentityRegistrationChallengeTicketEncrypted encrypted_registration_ticket = 1;
  bytes identity_registrar_signature_of_encrypted_registration_ticket = 2;
  uint32 valid_after = 10;
  uint32 valid_before = 11;
  string recipient_domain = 20;
}

// IdentityRegistrationTicket signed by the identity registrar instance's private key; ticket is signed, not encrypted
message IdentityRegistrationTicketSigned {
  bytes signature = 1;
  IdentityRegistrationTicket ticket = 2;
}

message IdentityRegistrationTicket {
  bytes identity_registrar_instance_id = 1;
  uint32 valid_after = 2;
  uint32 valid_before = 3;
  bytes sender_id = 10;
  string sender_domain = 11;
  string recipient_domain = 12;
}


// MEDIATION REGISTRATION

service MediationRegistration {
  rpc Register(MediationRegistrationRequestEncrypted) returns (MediationRegistrationChallengeEncrypted) {}
  rpc Prove(MediationRegistrationProofEncrypted) returns (MediationRegistrationTicketEncrypted) {}
}

// MediationRegistrationRequest message encrypted by the mediation registrar instance's public key
message MediationRegistrationRequestEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRegistrationRequest {
  string domain = 1;
  bytes nonce = 2;
  bytes public_key = 3;
  bytes some_sort_of_authentication_proof = 10;
}

// MediationRegistrationChallenge message encrypted by the requester's public key provided via MediationRegistrationRequest message
message MediationRegistrationChallengeEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRegistrationChallenge {
  MediationRegistrationChallengeTicketEncrypted encrypted_registration_ticket = 1;
  bytes mediation_registrar_signature_of_encrypted_registration_ticket = 2;
  bytes cn_salt = 10;
}

// MediationRegistrationChallengeTicket message encrypted by the mediation registrar instance's super-secret MediationRegistrationTicket private key used only for this purpose
// ... to be created _and_ consumed by the mediation registrar instance itself
message MediationRegistrationChallengeTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRegistrationChallengeTicket {
  uint32 timestamp = 1;
  bytes nonce = 2;
  MediationRequest request = 3;
}

// MediationRegistrationProof message encrypted by the mediation registrar instance's public key
message MediationRegistrationProofEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRegistrationProof {
  MediationRegistrationChallengeTicketEncrypted encrypted_registration_ticket = 1;
  bytes mediation_registrar_signature_of_encrypted_registration_ticket = 2;
  uint32 valid_after = 10;
  uint32 valid_before = 11;
  CNSignTicketEncrypted cn_ticket = 20;
  bytes bumble_notification_id = 30; // used by forwarders to announce new messages to recipients; if empty, no notification
}

// MediationRegistrationTicketSigned message encrypted by the requester's public key provided via MediationRegister message
message MediationRegistrationTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

// MediationRegistrationTicket signed by the mediation registrar instance's private key; ticket is signed, not encrypted
message MediationRegistrationTicketSigned {
  MediationTicket ticket = 1;
  bytes signature = 2;
}

message MediationRegistrationTicket {
  bytes mediation_registrar_instance_id = 1;
  uint32 valid_after = 2;
  uint32 valid_before = 3;
  bytes id = 10;
  string domain = 11;
}

// gets stored in the MediationRegistration pool-shared database
message MediationRegistrationRecord {
  bytes hashed_value = 1; // hash(hash(cn_hash),hash(domain_hash),mr_salt)
  MediationRegistrationTicketSigned ticket = 2;
  bytes pubkey = 10;
}


// COMMON NAME SIGNER

service CNAuthority {
  rpc SignMediationRegistration(CNSignRequestEncrypted) returns (CNSignTicketEncrypted) {}
}

message CNSignRequestEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // CNSignRequest encrypted with CNAuthority instance's public key
  bytes signature = 4; // of payload
}

message CNSignRequest {
  bytes domain_hash = 1;
  bytes cn_hash = 2; // hash of cn without domain
  bytes mr_salt = 3;
  bytes mr_signature = 4; // given to Recipient via MediationRegistrationChallenge field #2
  bytes mr_pubkey = 5;
  bytes some_sort_of_authentication_proof = 10;
}

message CNSignTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // CNSignRequest encrypted with MediationRegistration instance's public key
  bytes signature = 4; // of payload; signature by CNAuthority instance private key
}

message CNSignTicket {
  uint32 timestamp = 1;
  bytes cn_domain_salt_hash = 2; // hash(hash(cn_hash),hash(domain_hash),mr_salt)
  bytes mr_salt = 3; // verbatum from CNSignRequest field #3
  bytes mr_signature = 4; // verbatum from CNSignRequest field #4
  uint32 valid_after = 10;
  uint32 valid_before = 11;
}


// MEDIATION

service Mediation {
  rpc Request(MediationRequestEncrypted) returns (MediationTicketEncrypted) {}
}

message MediationRequestEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRequest {
  string rcn_hash = 1;
  DomainTicket sender_domain_ticket = 10;
  bytes sender_pubkey = 11;
  bytes dh_public = 20; // generated by sender
  uint32 requested_ttl = 30;
}

message MediationTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // encrypted MediationTicketResponse by sender's public key
  bytes signature = 4; // of payload
}

// visible to the Sender
message MediationTicket {
  bytes mediation_instance_id = 1;
  uint32 timestamp = 2;
  bytes sender_id = 3;
  uint32 max_message_bytes = 4;
  bytes dh_public = 5; // generated by mediation
  MediationKeyTicketEncrypted ticket = 10;
  bytes signature = 11;
}

// ??? this probably isn't a ticket
message MediationKeyTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // encrypted MediationKeyTicket by recipient's public key
  bytes signature = 4; // of payload
}

// visible only to the Recipient
message MediationKeyTicket {
  bytes mediation_instance_id = 1;
  uint32 timestamp = 2;
  bytes sender_id = 3;
  uint32 max_message_bytes = 4;
  bytes dh_private = 5; // generated by mediation
}


// MEDIATION FORWARDER

service MediationForwarder {
  rpc Store(MediationForwarderStorageRequestEncrypted) returns (EncryptedEnvelope) {}
}

message MediationForwarderStorageRequestEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // encrypted ForwarderStorageRequest by forwarder instance's public key
  bytes signature = 4; // of payload
}

message MediationForwarderStorageRequest {
  uint32 timestamp = 1;
  bytes cn_domain_salt_hash = 2; // hash(hash(cn_hash),hash(domain_hash),mr_salt)
  bytes sender_domain_ticket = 3;
  MediationForwarderMessage message = 10;
}

message MediationForwarderMessage {
  repeated MediationTicket ticket = 1; // from MediationResponse field #10
  repeated bytes dh_public = 2;
  bytes encrypted_message = 3; // encrypted using DH from 2 or more MediationResponse messages (from multiple pools, etc) // needs to contain NEW DH values so we can kill off the mediated values! FIXME
  // ??? what about expiration of this stored message?  need to know when to cull...
}

// ??? forwarder storage types?  remember that forwarder has its own keystore (created by MediationRegistration API) and will encrypt the resulting message with that.


// MEDIATION RETRIEVER

service MediationRetriever {
  rpc Retrieve(MediationRetrieverRequestEncrypted) returns (MediationRetrieverResponseEncrypted) {}
  rpc TicketRequest(MediationRetrieverTicketRequestEncrypted) returns (MediationRetrieverTicketChallengeEncrypted) {}
  rpc TicketProve(MediationRetrieverTicketProofEncrypted) returns (MediationRetrieverTicketEncrypted) {}
}

// // Retrieval

message MediationRetrieverRequestEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // encrypted MediationRetrieverRequest by retriever instance's public key
  bytes signature = 4; // of payload
}

message MediationRetrieverRequest {
  MediationRetrieverTicketSigned ticket = 1;
  string nonce = 2;
  bytes symmetric_key = 3; // the retriever will use this to encrypt the messages in the response
  uint32 max_message_count = 10;
}

// encrypted MediationRetrieverResponse by MediationRetrieverRequest's field #3 symmetric_key
message MediationRetrieverResponseEncrypted {
  bytes payload = 1;
  // ???: doesn't this need a nonce for GCM?  is it safe to use MediationRetrieverRequest's field #2?
}

message MediationRetrieverResponse {
  uint32 timestamp = 1;
  string nonce = 2;
  repeated MediationRetrieverMessage payload = 3; // does not need to be encrypted
}

message MediationRetrieverMessage {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // encrypted with recipient's public key
  bytes signature = 4; // of payload; signed by retriever instance's public key
}

// // Ticket creation

message MediationRetrieverTicketRequestEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3; // encrypted MediationRetrieverRequest by retriever instance's public key
  bytes signature = 4; // of payload
}

message MediationRetrieverTicketRequest {
  string domain = 1;
  string nonce = 2;
  bytes public_key = 3;
}

// MediationRetrieverChallenge message encrypted by the requester's public key provided via MediationRetrieverRequest message
message MediationRetrieverTicketChallengeEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRetrieverTicketChallenge {
  IdentityRegistrationChallengeTicketEncrypted encrypted_registration_ticket = 1;
  bytes identity_registrar_signature_of_encrypted_registration_ticket = 2;
}

// MediationRetrieverChallengeTicket message encrypted by the identity registrar instance's super-secret MediationRetrieverChallengeTicket private key used only for this purpose
// ... to be created _and_ consumed by the identity registrar instance itself
message MediationRetrieverTicketChallengeTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRetrieverTicketChallengeTicket {
  uint32 timestamp = 1;
  bytes nonce = 2;
  MediationRetrieverTicketRequest request = 3;
}

// MediationRetrieverProof message encrypted by the retriever instance's public key
message MediationRetrieverTicketProofEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

message MediationRetrieverTicketProof {
  MediationRetrieverTicketChallengeTicketEncrypted encrypted_registration_ticket = 1;
  bytes mediation_retriever_signature_of_encrypted_registration_ticket = 2;
  uint32 valid_before = 11;
}

// MediationRetrieverTicketSigned message encrypted by the requester's public key provided via IMediationRetrieverTicketRequest message
message MediationRetrieverTicketEncrypted {
  bytes key = 1; // one-time use to decrypt payload; if empty, use session key (if exists)
  bytes nonce = 2; // one-time use; not secret
  bytes payload = 3;
  bytes signature = 4; // of payload
}

// MediationRetrieverTicket signed by the identity registrar instance's private key; ticket is signed, not encrypted
message MediationRetrieverTicketSigned {
  MediationRetrieverTicket ticket = 1;
  bytes signature = 2;
}

message MediationRetrieverTicket {
  bytes mediation_retriever_instance_id = 1;
  uint32 valid_after = 2;
  uint32 valid_before = 3;
  bytes public_key = 10; // public key that MR knows
  string domain = 11;
}
