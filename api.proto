syntax = "proto3";

package tanuki;


// COMMON

message StatusResponse {
  bool success = 1;
  uint32 error_type = 2;
  string error_description = 3;
}

message DomainTicket {
  bytes sender_pubkey_hash = 1;
  uint32 valid_after = 10;
  uint32 valid_before = 11;
  string sender_domain = 20;
  string recipient_domain = 21;
}


// ROUTER
// all router code needs redone...

service Router {
  rpc Receive(SubscriptionRequest) returns (stream Envelope) {}
  rpc Send(Envelope) returns (StatusResponse) {}
}

message SubscriptionRequest {
  string id = 1;
}

message Envelope {
  string recipient = 1;
  bytes pgp_message = 10;
}

message Message {
  string recipient = 1;
  string sender = 2;
  bytes message = 10;
  uint32 type = 11;
}


// IDENTITY REGISTRATION

service IdentityRegistration {
  rpc Register(IdentityRequestEncrypted) returns (IdentityChallengeEncrypted) {}
  rpc Prove(IdentityProveEncrypted) returns (IdentityTicketEncrypted) {}
}

// IdentityRequest message encrypted by the identity registrar instance's public key
message IdentityRequestEncrypted {
  bytes payload = 1;
  bytes signature = 2;
}

message IdentityRequest {
  string domain = 1;
  bytes nonce = 2;
  bytes public_key = 3;
  bytes some_sort_of_authentication_proof = 10;
}

// IdentityChallenge message encrypted by the requester's public key provided via IdentityRegister message
message IdentityChallengeEncrypted {
  bytes payload = 1;
  bytes signature = 2;
}

message IdentityChallenge {
  IdentityRegistrationTicketEncrypted encrypted_registration_ticket = 1;
  bytes identity_registrar_signature_of_encrypted_registration_ticket = 2;
}

// IdentityRegistrationTicket message encrypted by the identity registrar instance's super-secret IdentityRegistrationTicket private key used only for this purpose
// ... to be created _and_ consumed by the identity registrar instance itself
message IdentityRegistrationTicketEncrypted {
  bytes payload = 1;
  bytes signature = 2;
}

message IdentityRegistrationTicket {
  uint32 timestamp = 1;
  bytes nonce = 2;
  IdentityRequest request = 3;
}

// IdentityProve message encrypted by the identity registrar instance's public key
message IdentityProveEncrypted {
  bytes payload = 1;
  bytes signature = 2;
}

message IdentityProve {
  IdentityRegistrationTicketEncrypted encrypted_registration_ticket = 1;
  bytes identity_registrar_signature_of_encrypted_registration_ticket = 2;
  uint32 valid_after = 10;
  uint32 valid_before = 11;
}

// IdentityTicketSigned message encrypted by the requester's public key provided via IdentityRegister message
message IdentityTicketEncrypted {
  bytes payload = 1;
  bytes signature = 2;
}

// IdentityTicket signed by the identity registrar instance's private key; ticket is signed, not encrypted
message IdentityTicketSigned {
  bytes signature = 1;
  IdenityTicket ticket = 2;
}

message IdentityTicket {
  bytes identity_registrar_instance_id = 1;
  uint32 valid_after = 2;
  uint32 valid_before = 3;
  bytes sender_id = 10;
  string sender_domain = 11;
  string recipient_domain = 12;
  // ??? does the lack of recipient ID mean that it can be used for many recipients at the recipient domain? (chicken/egg problem knowing recipient ID in advance anyway)
}


// MEDIATOR

service Mediator {
  rpc Handshake(MediatorHandshakeRequest) returns (MediatorHandshakeResponse) {}
}

message MediatorHandshakeRequest {
  string saltyhash_of_recipient_common_name = 1;
  DomainTicket sender_domain_ticket = 10;
  bytes sender_pubkey = 11;
  uint32 requested_ttl = 20;
}

message MediatorHandshakeResponse {
  bytes encrypted_response = 1;
}

message MediatorHandshakeEncryptedResponse {
  bytes signature = 1;
  bytes key = 2;
  uint32 timestamp = 10;
  uint32 negotiated_ttl = 20;
}

message MediatorStoredRecord {
  bytes user_pubkey = 1;
}


// FORWARDER

service Forwarder {
  rpc Store(ForwarderStorageRequest) returns (StatusResponse) {}
  rpc Retrieve(ForwarderRetrievalRequest) returns (ForwarderRetrievalResponse) {}
}

message ForwarderStorageRequest {
  bytes encrypted_message = 1;
  bytes sender_domain_ticket = 10;
  string some_sort_of_recipient_identifier = 10;
  uint32 negotiated_ttl = 20;
}

message ForwarderRetrievalRequest {
  string some_sort_of_recipient_identifier = 10;
}

message ForwarderRetrievalResponse {
  bytes encrypted_message = 1;
}
