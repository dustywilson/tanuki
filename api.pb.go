// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package tanuki is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	StatusResponse
	SubscriptionRequest
	Envelope
	Message
	MediatorHandshakeRequest
	MediatorHandshakeResponse
	MediatorHandshakeEncryptedResponse
	MediatorStoredRecord
	ForwarderStorageRequest
	ForwarderRetrievalRequest
	ForwarderRetrievalResponse
*/
package tanuki

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type StatusResponse struct {
	Success          bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ErrorType        uint32 `protobuf:"varint,2,opt,name=error_type" json:"error_type,omitempty"`
	ErrorDescription string `protobuf:"bytes,3,opt,name=error_description" json:"error_description,omitempty"`
}

func (m *StatusResponse) Reset()         { *m = StatusResponse{} }
func (m *StatusResponse) String() string { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()    {}

type SubscriptionRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *SubscriptionRequest) Reset()         { *m = SubscriptionRequest{} }
func (m *SubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*SubscriptionRequest) ProtoMessage()    {}

type Envelope struct {
	Recipient  string `protobuf:"bytes,1,opt,name=recipient" json:"recipient,omitempty"`
	PgpMessage []byte `protobuf:"bytes,10,opt,name=pgp_message,proto3" json:"pgp_message,omitempty"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}

type Message struct {
	Recipient string `protobuf:"bytes,1,opt,name=recipient" json:"recipient,omitempty"`
	Sender    string `protobuf:"bytes,2,opt,name=sender" json:"sender,omitempty"`
	Message   []byte `protobuf:"bytes,10,opt,name=message,proto3" json:"message,omitempty"`
	Type      uint32 `protobuf:"varint,11,opt,name=type" json:"type,omitempty"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

type MediatorHandshakeRequest struct {
	Recipient    string `protobuf:"bytes,1,opt,name=recipient" json:"recipient,omitempty"`
	DomainTicket []byte `protobuf:"bytes,10,opt,name=domain_ticket,proto3" json:"domain_ticket,omitempty"`
	SenderPubkey []byte `protobuf:"bytes,11,opt,name=sender_pubkey,proto3" json:"sender_pubkey,omitempty"`
	Ttl          uint32 `protobuf:"varint,20,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *MediatorHandshakeRequest) Reset()         { *m = MediatorHandshakeRequest{} }
func (m *MediatorHandshakeRequest) String() string { return proto.CompactTextString(m) }
func (*MediatorHandshakeRequest) ProtoMessage()    {}

type MediatorHandshakeResponse struct {
	EncryptedResponse []byte `protobuf:"bytes,1,opt,name=encrypted_response,proto3" json:"encrypted_response,omitempty"`
}

func (m *MediatorHandshakeResponse) Reset()         { *m = MediatorHandshakeResponse{} }
func (m *MediatorHandshakeResponse) String() string { return proto.CompactTextString(m) }
func (*MediatorHandshakeResponse) ProtoMessage()    {}

type MediatorHandshakeEncryptedResponse struct {
	Signature     []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Key           []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp     uint32 `protobuf:"varint,10,opt,name=timestamp" json:"timestamp,omitempty"`
	NegotiatedTtl uint32 `protobuf:"varint,20,opt,name=negotiated_ttl" json:"negotiated_ttl,omitempty"`
}

func (m *MediatorHandshakeEncryptedResponse) Reset()         { *m = MediatorHandshakeEncryptedResponse{} }
func (m *MediatorHandshakeEncryptedResponse) String() string { return proto.CompactTextString(m) }
func (*MediatorHandshakeEncryptedResponse) ProtoMessage()    {}

type MediatorStoredRecord struct {
	UserPubkey []byte `protobuf:"bytes,1,opt,name=user_pubkey,proto3" json:"user_pubkey,omitempty"`
}

func (m *MediatorStoredRecord) Reset()         { *m = MediatorStoredRecord{} }
func (m *MediatorStoredRecord) String() string { return proto.CompactTextString(m) }
func (*MediatorStoredRecord) ProtoMessage()    {}

type ForwarderStorageRequest struct {
	EncryptedMessage              []byte `protobuf:"bytes,1,opt,name=encrypted_message,proto3" json:"encrypted_message,omitempty"`
	SomeSortOfRecipientIdentifier string `protobuf:"bytes,10,opt,name=some_sort_of_recipient_identifier" json:"some_sort_of_recipient_identifier,omitempty"`
	NegotiatedTtl                 uint32 `protobuf:"varint,20,opt,name=negotiated_ttl" json:"negotiated_ttl,omitempty"`
}

func (m *ForwarderStorageRequest) Reset()         { *m = ForwarderStorageRequest{} }
func (m *ForwarderStorageRequest) String() string { return proto.CompactTextString(m) }
func (*ForwarderStorageRequest) ProtoMessage()    {}

type ForwarderRetrievalRequest struct {
	SomeSortOfRecipientIdentifier string `protobuf:"bytes,10,opt,name=some_sort_of_recipient_identifier" json:"some_sort_of_recipient_identifier,omitempty"`
}

func (m *ForwarderRetrievalRequest) Reset()         { *m = ForwarderRetrievalRequest{} }
func (m *ForwarderRetrievalRequest) String() string { return proto.CompactTextString(m) }
func (*ForwarderRetrievalRequest) ProtoMessage()    {}

type ForwarderRetrievalResponse struct {
	EncryptedMessage []byte `protobuf:"bytes,1,opt,name=encrypted_message,proto3" json:"encrypted_message,omitempty"`
}

func (m *ForwarderRetrievalResponse) Reset()         { *m = ForwarderRetrievalResponse{} }
func (m *ForwarderRetrievalResponse) String() string { return proto.CompactTextString(m) }
func (*ForwarderRetrievalResponse) ProtoMessage()    {}

// Client API for Router service

type RouterClient interface {
	Receive(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Router_ReceiveClient, error)
	Send(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*StatusResponse, error)
}

type routerClient struct {
	cc *grpc.ClientConn
}

func NewRouterClient(cc *grpc.ClientConn) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) Receive(ctx context.Context, in *SubscriptionRequest, opts ...grpc.CallOption) (Router_ReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Router_serviceDesc.Streams[0], c.cc, "/tanuki.Router/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_ReceiveClient interface {
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type routerReceiveClient struct {
	grpc.ClientStream
}

func (x *routerReceiveClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *routerClient) Send(ctx context.Context, in *Envelope, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/tanuki.Router/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Router service

type RouterServer interface {
	Receive(*SubscriptionRequest, Router_ReceiveServer) error
	Send(context.Context, *Envelope) (*StatusResponse, error)
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscriptionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).Receive(m, &routerReceiveServer{stream})
}

type Router_ReceiveServer interface {
	Send(*Envelope) error
	grpc.ServerStream
}

type routerReceiveServer struct {
	grpc.ServerStream
}

func (x *routerReceiveServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func _Router_Send_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Envelope)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(RouterServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tanuki.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Router_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _Router_Receive_Handler,
			ServerStreams: true,
		},
	},
}

// Client API for Mediator service

type MediatorClient interface {
	Handshake(ctx context.Context, in *MediatorHandshakeRequest, opts ...grpc.CallOption) (*MediatorHandshakeResponse, error)
}

type mediatorClient struct {
	cc *grpc.ClientConn
}

func NewMediatorClient(cc *grpc.ClientConn) MediatorClient {
	return &mediatorClient{cc}
}

func (c *mediatorClient) Handshake(ctx context.Context, in *MediatorHandshakeRequest, opts ...grpc.CallOption) (*MediatorHandshakeResponse, error) {
	out := new(MediatorHandshakeResponse)
	err := grpc.Invoke(ctx, "/tanuki.Mediator/Handshake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mediator service

type MediatorServer interface {
	Handshake(context.Context, *MediatorHandshakeRequest) (*MediatorHandshakeResponse, error)
}

func RegisterMediatorServer(s *grpc.Server, srv MediatorServer) {
	s.RegisterService(&_Mediator_serviceDesc, srv)
}

func _Mediator_Handshake_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(MediatorHandshakeRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(MediatorServer).Handshake(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Mediator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tanuki.Mediator",
	HandlerType: (*MediatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Handshake",
			Handler:    _Mediator_Handshake_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

// Client API for Forwarder service

type ForwarderClient interface {
	Store(ctx context.Context, in *ForwarderStorageRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	Retrieve(ctx context.Context, in *ForwarderRetrievalRequest, opts ...grpc.CallOption) (*ForwarderRetrievalResponse, error)
}

type forwarderClient struct {
	cc *grpc.ClientConn
}

func NewForwarderClient(cc *grpc.ClientConn) ForwarderClient {
	return &forwarderClient{cc}
}

func (c *forwarderClient) Store(ctx context.Context, in *ForwarderStorageRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/tanuki.Forwarder/Store", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forwarderClient) Retrieve(ctx context.Context, in *ForwarderRetrievalRequest, opts ...grpc.CallOption) (*ForwarderRetrievalResponse, error) {
	out := new(ForwarderRetrievalResponse)
	err := grpc.Invoke(ctx, "/tanuki.Forwarder/Retrieve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Forwarder service

type ForwarderServer interface {
	Store(context.Context, *ForwarderStorageRequest) (*StatusResponse, error)
	Retrieve(context.Context, *ForwarderRetrievalRequest) (*ForwarderRetrievalResponse, error)
}

func RegisterForwarderServer(s *grpc.Server, srv ForwarderServer) {
	s.RegisterService(&_Forwarder_serviceDesc, srv)
}

func _Forwarder_Store_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ForwarderStorageRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ForwarderServer).Store(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Forwarder_Retrieve_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(ForwarderRetrievalRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ForwarderServer).Retrieve(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Forwarder_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tanuki.Forwarder",
	HandlerType: (*ForwarderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _Forwarder_Store_Handler,
		},
		{
			MethodName: "Retrieve",
			Handler:    _Forwarder_Retrieve_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
